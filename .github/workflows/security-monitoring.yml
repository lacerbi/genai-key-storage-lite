name: Security Monitoring

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    paths:
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    paths:
      - 'package.json'
      - 'package-lock.json'

jobs:
  security-audit:
    name: Daily Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: |
          echo "üîç Running npm security audit..."
          npm audit --audit-level=moderate --json > audit-results.json || true
          
          # Check if there are any vulnerabilities
          if [ -s audit-results.json ]; then
            echo "üìä Audit Results:"
            cat audit-results.json | jq -r '.vulnerabilities | to_entries[] | "\(.key): \(.value.severity)"' || true
            
            # Check for high/critical vulnerabilities
            HIGH_CRITICAL=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.high // 0 + .metadata.vulnerabilities.critical // 0')
            
            if [ "$HIGH_CRITICAL" -gt 0 ]; then
              echo "‚ùå High or critical vulnerabilities found!"
              npm audit
              exit 1
            else
              echo "‚úÖ No high or critical vulnerabilities found"
            fi
          else
            echo "‚úÖ No vulnerabilities found"
          fi
          
      - name: Check for outdated dependencies
        run: |
          echo "üì¶ Checking for outdated dependencies..."
          npm outdated || echo "Some dependencies are outdated"
          
      - name: Create issue for vulnerabilities
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Security vulnerabilities detected - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Alert
            
            High or critical security vulnerabilities have been detected in dependencies.
            
            **Action Required:**
            - Review the vulnerabilities using \`npm audit\`
            - Update affected packages using \`npm audit fix\`
            - Test thoroughly after updates
            - Close this issue once resolved
            
            **Automated Detection Date:** ${new Date().toISOString()}
            
            This issue was automatically created by the security monitoring workflow.
            `;
            
            // Check if a similar issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['security', 'automated'],
              state: 'open'
            });
            
            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'automated', 'high-priority']
              });
            }

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-2.0, GPL-3.0
          
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check licenses
        run: |
          echo "üìÑ Checking dependency licenses..."
          
          # Install license checker
          npm install -g license-checker
          
          # Check licenses and generate report
          license-checker --json --out licenses.json
          
          # Check for problematic licenses
          PROBLEMATIC_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0")
          
          echo "Checking for problematic licenses..."
          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if grep -q "$license" licenses.json; then
              echo "‚ùå Found problematic license: $license"
              grep "$license" licenses.json
              exit 1
            fi
          done
          
          echo "‚úÖ All dependency licenses are compatible"
          
      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json
          retention-days: 30